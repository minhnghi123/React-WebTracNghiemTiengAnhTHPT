import {
  Paragraph,
  TextRun,
  Table,
  TableRow,
  TableCell,
  WidthType,
  AlignmentType,
  BorderStyle,
} from "docx";

import { renderHtmlToTextRun } from "./renderHtmlToTextRun.js";

/**
 * X√≥a ti·ªÅn t·ªë "A. ", "B. ", ... n·∫øu c√≥ trong text.
 * @param {string} text - N·ªôi dung ƒë√°p √°n g·ªëc.
 * @returns {string} - N·ªôi dung ƒë√£ l√†m s·∫°ch.
 */
const sanitizeAnswerText = (text) => {
  return text.replace(/^[A-D]\.\s*/, "");
};

const getAnswerCell = (answerText, index) =>
  new TableCell({
    margins: { top: 100, bottom: 100, left: 200, right: 200 },
    children: [
      new Paragraph({
        children: [
          new TextRun({
            text: `${["A", "B", "C", "D"][index]}. ${sanitizeAnswerText(
              answerText || ""
            )}`,
            font: "Times New Roman",
            size: 22,
          }),
        ],
      }),
    ],
    borders: {
      top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
      bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
      left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
      right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
    },
    width: { size: 50, type: WidthType.PERCENTAGE },
  });

/**
 * T·∫°o ph·∫ßn c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi khung m√†u tr·∫Øng v√† kho·∫£ng c√°ch h·ª£p l√Ω.
 * @param {Array} questionsMultichoice - Danh s√°ch c√¢u h·ªèi tr·∫Øc nghi·ªám.
 * @returns {Array} - M·∫£ng c√°c Paragraph v√† Table.
 */
export const formatExamQuestions = (questionsMultichoice) => [
  // üìö Ti√™u ƒê·ªÅ Ph·∫ßn C√¢u H·ªèi
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI TR·∫ÆC NGHI·ªÜM:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  ...questionsMultichoice.flatMap((question, index) => {
    const getAnswerCell = (answerText, index) =>
      new TableCell({
        margins: { top: 100, bottom: 100, left: 200, right: 200 },
        children: [
          new Paragraph({
            children: [
              new TextRun({
                text: `${["A", "B", "C", "D"][index]}. ${sanitizeAnswerText(
                  answerText || ""
                )}`,
                font: "Times New Roman",
                size: 22,
              }),
            ],
          }),
        ],
        borders: {
          top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
          bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
          left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
          right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
        },
        width: { size: 50, type: WidthType.PERCENTAGE },
      });

    return [
      // üìù Hi·ªÉn th·ªã c√¢u h·ªèi
      new Paragraph({
        children: [
          // Ki·ªÉm tra xem c√¢u h·ªèi c√≥ ch·ª©a HTML hay kh√¥ng
          question.content.includes("<")
            ? renderHtmlToTextRun(question.content) // N·∫øu c√≥ HTML, s·ª≠ d·ª•ng renderHtmlToTextRun
            : new TextRun({
                text: `${index + 1}. ${question.content}`,
                bold: true,
                font: "Times New Roman",
                size: 24,
              }),
        ],
        spacing: { after: 150 },
      }),

      // üìä Hi·ªÉn th·ªã ƒë√°p √°n trong b·∫£ng 2x2
      new Table({
        width: { size: 100, type: WidthType.PERCENTAGE },
        rows: [
          new TableRow({
            children: [
              getAnswerCell(question.answers[0]?.text, 0),
              getAnswerCell(question.answers[1]?.text, 1),
            ],
          }),
          new TableRow({
            children: [
              getAnswerCell(question.answers[2]?.text, 2),
              getAnswerCell(question.answers[3]?.text, 3),
            ],
          }),
        ],
        spacing: { before: 100, after: 200 },
      }),

      // üìè Kho·∫£ng c√°ch gi·ªØa c√°c c√¢u
      new Paragraph({
        children: [],
        spacing: { after: 200 },
      }),
    ];
  }),
];
/**
 * T·∫°o ph·∫ßn c√¢u h·ªèi ƒëi·ªÅn khuy·∫øt ƒë∆°n gi·∫£n.
 * @param {Array} questionsFillInBlank - Danh s√°ch c√¢u h·ªèi ƒëi·ªÅn khuy·∫øt.
 * @returns {Array}
 */
export const formatFillInBlankQuestions = (questionsFillInBlank) => [
  // üìö Ti√™u ƒê·ªÅ Ph·∫ßn C√¢u H·ªèi
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI ƒêI·ªÄN KHUY·∫æT:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  // üìù Hi·ªÉn Th·ªã T·ª´ng C√¢u H·ªèi ƒêi·ªÅn Khuy·∫øt
  ...questionsFillInBlank.map((question, index) => 
    new Paragraph({
      children: [
        question.content.includes("<")
          ? renderHtmlToTextRun(question.content)  // N·∫øu c√≥ HTML, render HTML
          : new TextRun({
              text: `${index + 1}. ${question.content}`,
              font: "Times New Roman",
              size: 24,
            }),
      ],
      spacing: { after: 150 },
    })
  ),
];

/**
 * T·∫°o ph·∫ßn c√¢u h·ªèi b√†i nghe (Listening)
 * @param {Array} questionsListening
 * @returns {Array}
 */


export const formatListeningQuestions = (questionsListening) => [
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI B√ÄI NGHE:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  ...questionsListening.flatMap((listening, index) => [
    // Transcript
    new Paragraph({
      children: [
        new TextRun({
          text: `Transcript: ${listening.transcript || '.....................'}`,
          italics: true,
          font: "Times New Roman",
          size: 22,
        }),
      ],
      spacing: { after: 100 },
    }),

    // Audio link
    listening.audio
      ? new Paragraph({
          children: [
            new TextRun({
              text: "Audio: ",
              bold: true,
              font: "Times New Roman",
              size: 22,
            }),
            new TextRun({
              text: listening.audio,
              style: "Hyperlink",
              color: "0563C1",
              underline: true,
            }),
          ],
          spacing: { after: 150 },
        })
      : new Paragraph({
          children: [new TextRun({ text: "", size: 1 })],
          spacing: { after: 100 },
        }),

    // Questions
    ...listening.questions.flatMap((question, qIndex) => [
      new Paragraph({
        children: [
          new TextRun({
            text: `${index + 1}.${qIndex + 1} ${question.content}`,
            bold: true,
            font: "Times New Roman",
            size: 24,
          }),
        ],
        spacing: { after: 100 },
      }),

      new Table({
        width: { size: 100, type: WidthType.PERCENTAGE },
        rows: [
          new TableRow({
            children: [
              getAnswerCell(question.answers[0]?.text, 0),
              getAnswerCell(question.answers[1]?.text, 1),
            ],
          }),
          new TableRow({
            children: [
              getAnswerCell(question.answers[2]?.text, 2),
              getAnswerCell(question.answers[3]?.text, 3),
            ],
          }),
        ],
        spacing: { before: 100, after: 200 },
      }),

      new Paragraph({
        children: [],
        spacing: { after: 200 },
      }),
    ]),
  ]),
];
