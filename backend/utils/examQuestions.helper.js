import { Paragraph, TextRun, Table, TableRow, TableCell, WidthType, AlignmentType, BorderStyle } from 'docx';

/**
 * T·∫°o ph·∫ßn c√¢u h·ªèi tr·∫Øc nghi·ªám v·ªõi khung m√†u tr·∫Øng v√† kho·∫£ng c√°ch h·ª£p l√Ω.
 * @param {Array} questionsMultichoice - Danh s√°ch c√¢u h·ªèi tr·∫Øc nghi·ªám.
 * @returns {Array} - M·∫£ng c√°c Paragraph v√† Table.
 */
export const formatExamQuestions = (questionsMultichoice) => [
  // üìö Ti√™u ƒê·ªÅ Ph·∫ßn C√¢u H·ªèi
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI TR·∫ÆC NGHI·ªÜM:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  // üìö X·ª≠ L√Ω Danh S√°ch C√¢u H·ªèi
  ...questionsMultichoice.map((question, index) => {
    const MAX_ANSWER_LENGTH = 30; // ƒê·ªô d√†i t·ªëi ƒëa c·ªßa 1 ƒë√°p √°n ƒë·ªÉ quy·∫øt ƒë·ªãnh ki·ªÉu hi·ªÉn th·ªã

    // Ki·ªÉm tra xem t·∫•t c·∫£ ƒë√°p √°n c√≥ ng·∫Øn kh√¥ng
    const isShortAnswers = question.answers.every(
      (answer) => answer.text.length <= MAX_ANSWER_LENGTH
    );

    return [
      // üìù Hi·ªÉn Th·ªã C√¢u H·ªèi
      new Paragraph({
        children: [
          new TextRun({
            text: `${index + 1}. ${question.content}`,
            bold: true,
            font: "Times New Roman",
            size: 24,
          }),
        ],
        spacing: { after: 150 }, // Kho·∫£ng c√°ch gi·ªØa c√¢u h·ªèi v√† ƒë√°p √°n
      }),

      // üÖ∞Ô∏è Hi·ªÉn Th·ªã ƒê√°p √Ån
      isShortAnswers
        ? // üìä Hi·ªÉn Th·ªã 2 ƒê√°p √Ån Tr√™n 1 H√†ng (D·∫°ng B·∫£ng V·ªõi Khung M√†u Tr·∫Øng)
          new Table({
            width: { size: 100, type: WidthType.PERCENTAGE },
            rows: [
              new TableRow({
                children: [
                  new TableCell({
                    margins: { top: 100, bottom: 100, left: 200, right: 200 }, // Padding b√™n trong √¥
                    children: [
                      new Paragraph({
                        children: [
                          new TextRun({
                            text: `A. ${question.answers[0]?.text || ''}`,
                            font: "Times New Roman",
                            size: 22,
                          }),
                        ],
                      }),
                    ],
                    borders: {
                      top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    },
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                  new TableCell({
                    margins: { top: 100, bottom: 100, left: 200, right: 200 },
                    children: [
                      new Paragraph({
                        children: [
                          new TextRun({
                            text: `B. ${question.answers[1]?.text || ''}`,
                            font: "Times New Roman",
                            size: 22,
                          }),
                        ],
                      }),
                    ],
                    borders: {
                      top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    },
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                ],
              }),
              new TableRow({
                children: [
                  new TableCell({
                    margins: { top: 100, bottom: 100, left: 200, right: 200 },
                    children: [
                      new Paragraph({
                        children: [
                          new TextRun({
                            text: `C. ${question.answers[2]?.text || ''}`,
                            font: "Times New Roman",
                            size: 22,
                          }),
                        ],
                      }),
                    ],
                    borders: {
                      top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    },
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                  new TableCell({
                    margins: { top: 100, bottom: 100, left: 200, right: 200 },
                    children: [
                      new Paragraph({
                        children: [
                          new TextRun({
                            text: `D. ${question.answers[3]?.text || ''}`,
                            font: "Times New Roman",
                            size: 22,
                          }),
                        ],
                      }),
                    ],
                    borders: {
                      top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                      right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    },
                    width: { size: 50, type: WidthType.PERCENTAGE },
                  }),
                ],
              }),
            ],
            spacing: { before: 100, after: 200 }, // Kho·∫£ng c√°ch gi·ªØa b·∫£ng v√† c√¢u h·ªèi ti·∫øp theo
          })
        : // üìä Hi·ªÉn Th·ªã M·ªói ƒê√°p √Ån Tr√™n 1 H√†ng
        new Table({
          width: { size: 100, type: WidthType.PERCENTAGE },
          rows: question.answers.map((answer, i) =>
            new TableRow({
              children: [
                new TableCell({
                  children: [
                    new Paragraph({
                      children: [
                        new TextRun({
                          text: `${['A', 'B', 'C', 'D'][i]}. ${answer.text}`,
                          font: "Times New Roman",
                          size: 22,
                        }),
                      ],
                      spacing: { after: 50 }, // Kho·∫£ng c√°ch gi·ªØa c√°c ƒë√°p √°n
                    }),
                  ],
                  margins: { top: 100, bottom: 100, left: 200, right: 200 }, // Padding b√™n trong √¥
                  borders: {
                    top: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    bottom: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    left: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                    right: { style: BorderStyle.SINGLE, color: "FFFFFF" },
                  },
                  width: { size: 100, type: WidthType.PERCENTAGE },
                }),
              ],
            })
          ),
          spacing: { before: 50, after: 100 }, // Kho·∫£ng c√°ch gi·ªØa b·∫£ng v√† c√¢u h·ªèi ti·∫øp theo
        }),
    

      // üìù Th√™m Kho·∫£ng C√°ch Gi·ªØa C√°c C√¢u H·ªèi
      new Paragraph({
        children: [],
        spacing: { after: 200 }, // Kho·∫£ng c√°ch gi·ªØa c√¢u h·ªèi n√†y v√† c√¢u h·ªèi ti·∫øp theo
      }),
    ];
  }).flat(),
];


/**
 * T·∫°o ph·∫ßn c√¢u h·ªèi ƒëi·ªÅn khuy·∫øt ƒë∆°n gi·∫£n.
 * @param {Array} questionsFillInBlank - Danh s√°ch c√¢u h·ªèi ƒëi·ªÅn khuy·∫øt.
 * @returns {Array} - M·∫£ng c√°c Paragraph.
 */
export const formatFillInBlankQuestions = (questionsFillInBlank) => [
  // üìö Ti√™u ƒê·ªÅ Ph·∫ßn C√¢u H·ªèi
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI ƒêI·ªÄN KHUY·∫æT:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  // üìù Hi·ªÉn Th·ªã T·ª´ng C√¢u H·ªèi ƒêi·ªÅn Khuy·∫øt
  ...questionsFillInBlank.map((question, index) =>
    new Paragraph({
      children: [
        new TextRun({
          text: `${index + 1}. ${question.content}`,
          font: "Times New Roman",
          size: 24,
        }),
      ],
      spacing: { after: 150 }, // Kho·∫£ng c√°ch gi·ªØa c√°c c√¢u h·ªèi
    })
  )
];


export const formatListeningQuestions = (questionsListening) => [
  // üìö Ti√™u ƒê·ªÅ Ph·∫ßn C√¢u H·ªèi B√†i Nghe
  new Paragraph({
    children: [
      new TextRun({
        text: "C√ÇU H·ªéI B√ÄI NGHE:",
        bold: true,
        font: "Times New Roman",
        size: 26,
      }),
    ],
    alignment: AlignmentType.CENTER,
    spacing: { before: 200, after: 200 },
  }),

  // üéß X·ª≠ L√Ω T·ª´ng B√†i Nghe
  ...questionsListening.flatMap((listening, index) => [
    // üìù Hi·ªÉn Th·ªã Transcript
    new Paragraph({
      children: [
        new TextRun({
          text: `Transcript: ${listening.transcript || '.....................'}`,
          italics: true,
          font: "Times New Roman",
          size: 22,
        }),
      ],
      spacing: { after: 100 },
    }),

    // üéº Hi·ªÉn Th·ªã Link Audio (n·∫øu c√≥)
    listening.audio
      ? new Paragraph({
          children: [
            new TextRun({
              text: "Audio: ",
              bold: true,
              font: "Times New Roman",
              size: 22,
            }),
            new TextRun({
              text: listening.audio,
              style: "Hyperlink",
              color: "0563C1",
              underline: true,
            }),
          ],
          spacing: { after: 150 },
        })
      : new Paragraph({ children: [] }),

    // üìö Hi·ªÉn Th·ªã Danh S√°ch C√¢u H·ªèi K√®m ƒê√°p √Ån
    ...listening.questions.flatMap((question, qIndex) => [
      // üìù C√¢u H·ªèi
      new Paragraph({
        children: [
          new TextRun({
            text: `${index + 1}.${qIndex + 1} ${question.content}`,
            bold: true,
            font: "Times New Roman",
            size: 24,
          }),
        ],
        spacing: { after: 100 },
      }),

      // üÖ∞Ô∏è ƒê√°p √Ån
      ...question.answers.map((answer, i) => 
        new Paragraph({
          children: [
            new TextRun({
              text: `${['A', 'B', 'C', 'D'][i]}. ${answer.text}`,
              font: "Times New Roman",
              size: 22,
            }),
          ],
          spacing: { after: 50 },
        })
      ),

      // üìè Kho·∫£ng C√°ch Gi·ªØa C√°c C√¢u H·ªèi
      new Paragraph({
        children: [],
        spacing: { after: 150 },
      }),
    ]),

    // üìè Kho·∫£ng C√°ch Gi·ªØa C√°c Ph·∫ßn B√†i Nghe
    new Paragraph({
      children: [],
      spacing: { after: 200 },
    }),
  ]),
];